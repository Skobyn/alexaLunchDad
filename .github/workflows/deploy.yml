name: Deploy Alexa Skill

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

  deploy-dev:
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: SAM Build
        run: sam build

      - name: SAM Deploy to Dev
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name alexa-lunch-dad-dev \
            --parameter-overrides Environment=dev SkillId=${{ secrets.ALEXA_SKILL_ID_DEV }} \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --resolve-s3

  deploy-prod:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: SAM Build
        run: sam build

      - name: Check and Delete Failed Stack
        continue-on-error: true
        run: |
          # Check if stack exists and is in ROLLBACK_COMPLETE state
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name alexa-lunch-dad-prod \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "NONE")

          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack in ROLLBACK_COMPLETE state, deleting..."
            aws cloudformation delete-stack \
              --stack-name alexa-lunch-dad-prod \
              --region ${{ env.AWS_REGION }}

            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete \
              --stack-name alexa-lunch-dad-prod \
              --region ${{ env.AWS_REGION }}
            echo "Stack deleted successfully"
          else
            echo "Stack status: $STACK_STATUS (no action needed)"
          fi

      - name: SAM Deploy to Prod
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name alexa-lunch-dad-prod \
            --parameter-overrides Environment=prod SkillId=${{ secrets.ALEXA_SKILL_ID_PROD }} \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --resolve-s3
